unit NewSimCMD;

interface

uses MolDefs, Classes, Contnrs;

type
  TsimBase = class
           end;
  TInitGene = class(TsimBase)
     DoGamma : boolean;
     pAC,pAG,pAT,pCG,pCT,pGT,
     TiTv,Rate,
     GammaAlpha,
     targA,targC,targG,targT,
     initA,initC,initG,initT : double;
     NucModel : TNucModels;
     seqlength : integer;
     DoIns : boolean;
     DoDel : boolean;
     InDist,DelDist : byte;
     InRate,InSize,InPower,
     DelRate,DelSize,DelPower : double;
    end;

  TBranchModel = record
      gene,branch : integer;
    end;

var
    SubRootList, //: TList;
    GeneList : TObjectList;
    SubRootNumbers : array of TBranchModel;
    seed,Rcnt : integer;

function GetParam(var instr,out1,out2 : string) : boolean;
function CMDExecuteBatchCommand(batcom : string) : boolean;
procedure CMDResetGenes;
procedure CMDSetGeneValues(Gene : TInitGene);
procedure CMDRun;
procedure CMDFillSubModel(IGene : TInitGene; SModel : TSubstitutionModel;
          Node : TNode; GeneN : integer);
procedure WritePaupInput(filename,prefix : string; tree : TNode; IncAnc : boolean);
procedure WriteMegaInput(filename,prefix : string; tree : TNode; IncAnc : boolean);
procedure WriteFASTAInput(filename,prefix : string; tree : TNode; IncAnc : boolean);

implementation

uses SysUtils;

var
   CMDOutputType : byte;
   CMDRepN : integer;
   CMDAncestral : boolean;
   CMDTree,
   CMDOutputDir,
   CMDPrefix : string;
   tmpSeqLen,
   tmpRate,tmpGammaA,
   tmpAC,tmpAG,tmpAT,tmpCG,tmpCT,tmpGT,
   tmpinitA,tmpinitC,tmpinitT,tmpinitG,
   tmptargA,tmptargC,tmptargG,tmptargT,
   tmpInsRate,tmpInsSize,tmpInsPower,
   tmpDelRate,tmpDelSize,tmpDelPower,
   tmpKappa : string;
   tmpInsDist,tmpDelDist,
   tmpNucModel : byte;
   tmpDoIns,tmpDoDel,
   tmpGamma : boolean;


procedure CMDResetGenes;
var
   NewGene : TInitGene;
begin
     //NGeneBox.Text := '1';
     //GeneNBox.Text := '1';
     tmpSeqLen := '1000';
     tmpInitA := '0.25'; tmpInitC := '0.25';
     tmpInitG := '0.25'; tmpInitT := '0.25';
     tmpNucModel := 0;
     tmpRate := '0.001';
     tmpKappa := '2';
     tmptargA := '0.25'; tmptargC := '0.25';
     tmptargG := '0.25'; tmptargT := '0.25';
     tmpGammaA := '0.5';
     tmpGamma := false;
     tmpAC := '1';
     tmpAG := '1';
     tmpAT := '1';
     tmpCG := '1';
     tmpCT := '1';
     tmpGT := '1';
     tmpDoIns := false;
     tmpDoDel := false;
     tmpInsSize := '4';
     tmpInsRate := '100';
     tmpInsPower := '-2';
     tmpInsDist := 0;
     tmpDelSize := '4';
     tmpDelRate := '40';
     tmpDelPower := '-2';
     tmpDelDist := 0;

     GeneList.Clear;
     // clear nonstationary models
     SubRootList.Clear;
     Rcnt := 0;
     // create new gene
     NewGene := TInitGene.Create;
     CMDSetGeneValues(NewGene);
     GeneList.Add(NewGene);
end;

procedure CMDSetGeneValues(Gene : TInitGene);
begin
     with Gene do begin
          SeqLength := StrToInt(tmpSeqLen);
          initA := StrToFloat(tmpinitA);
          initC := StrToFloat(tmpinitC);
          initG := StrToFloat(tmpinitG);
          initT := StrToFloat(tmpinitT);
          TiTv := StrToFloat(tmpKappa) / 2.0;
          case tmpNucModel of
               0 : NucModel := nmJC;
               1 : NucModel := nmK2;
               2 : NucModel := nmEqInp;
               3 : NucModel := nmHKY;
               4 : NucModel := nmGenRes;
          end;
          targA := StrToFloat(tmptargA);
          targC := StrToFloat(tmptargC);
          targG := StrToFloat(tmptargG);
          targT := StrToFloat(tmptargT);
          Rate := StrToFloat(tmpRate);
          if tmpGamma then DoGamma := true
          else DoGamma := false;
          GammaAlpha := StrToFloat(tmpGammaA);
          pAC := StrToFloat(tmpaC);
          pAG := StrToFloat(tmpAG);
          pAT := StrToFloat(tmpAT);
          pCG := StrToFloat(tmpCG);
          pCT := StrToFloat(tmpCT);
          pGT := StrToFloat(tmpGT);
          if tmpDoIns then DoIns := true
          else DoIns := false;
          InRate := StrToFloat(tmpInsRate);
          InSize := StrToFloat(tmpInsSize);
          InPower := StrToFloat(tmpInsPower);
          InDist := tmpInsDist;
          if tmpDoDel then DoDel := true
          else DoDel := false;
          DelRate := StrToFloat(tmpDelRate);
          DelSize := StrToFloat(tmpDelSize);
          DelPower := StrToFloat(tmpDelPower);
          DelDist := tmpDelDist;
     end;
end;

function CMDExecuteBatchCommand(batcom : string) : boolean;
{ Batch Commands:
  quit = end batch routine; translated in main batch control loop : "quit;"
  execute = run simulation : "execute;"
  tree = set tree file : "tree treefile.txt;"
  output = set output parameters : "output nreps=100 dir=output prefix=outsim format=nex;"
  ngenes = set the number of genes : "ngenes 5;"
  gene = set gene parameters :
      "Gene 2 NSites=1000 StartA=0.25 StartC=0.25 StartG=0.25 StartT=0.25
        / 0: Model=HKY  Rate=0.01 Kappa=2 GammaAlpha=0 EqA=0.25 EqC=0.25 EqG=0.25 EqT=0.25
        / 5: Model=GenRes  Rate=0.01 Kappa=2 GammaAlpha=0 EqA=0.25 EqC=0.25 EqG=0.25 EqT=0.25
             GenResPar=(1,10,5,4,2,3)"
  cleargenes = clear all gene values and reset to defaults : "cleargenes;"
  }
var
   rstr,parstr,comstr : string;
   IsError : boolean;
   gn,i,intval : integer;
   newgene : TInitGene;
   gpars : array[1..6] of double;
   fval : double;
begin
     randomize;
     seed := -1 * 30000;
     fval := -1.0;
     IsError := false;
     if (UpperCase(batcom) = 'EXECUTE') then CmdRun
     else if (UpperCase(batcom) = 'CLEARGENES') then CMDResetGenes
     else if (Pos(' ',batcom) > 0) then begin
          comstr := UpperCase(trim(Copy(batcom,1,Pos(' ',batcom))));
          batcom := trim(Copy(batcom,Pos(' ',batcom),length(batcom)));
          if (comstr = 'TREE') then begin
             if (Pos(' ',batcom) > 0) or (Pos('=',batcom) > 0) then IsError := true
             else begin
                  CMDTree := batcom;
                  {OpenDialog.Filename := batcom;
                  TreeLabel.Caption := ExtractFileName(OpenDialog.FileName);
                  DisplayTreeButton.Enabled := true;
                  NodesButton.Enabled := true;
                  RunButton.Enabled := true;}
             end;
          end else if (comstr = 'OUTPUT') then begin
              while (batcom <> '') do begin
                    IsError := GetParam(batcom,comstr,parstr);
                    if (comstr = 'NREPS') then begin
                       intval := StrToIntDef(parstr,-1);
                       if (intval > 0) then CMDRepN := intval
                       else IsError := true;
                    end else if (comstr = 'DIR') then CMDOutputDir := parstr
                    else if (comstr = 'PREFIX') then CMDPrefix := parstr
                    else if (comstr = 'ANC') then begin
                         if (UpperCase(parstr) = 'YES') then CMDAncestral := true
                         else CMDAncestral := false;
                    end else if (comstr = 'FORMAT') then begin
                         if (UpperCase(parstr) = 'NEX') then
                            CMDOutputType := 0
                         else if (UpperCase(parstr) = 'MEG') then
                              CMDOutputType := 1
                         else if (UpperCase(parstr) = 'FAS') then
                              CMDOutputType := 2
                         else IsError := true;
                    end else IsError := true;
              end;
          end else if (comstr = 'NGENES') then begin
              if (Pos(' ',batcom) > 0) or (Pos('=',batcom) > 0) then IsError := true
              else begin
                   intval := StrToIntDef(batcom,-1);
                   if (intval > 0) then begin
                      if (GeneList = nil) then GeneList := TObjectList.Create
                      else begin
                           GeneList.Clear;
                      end;
                      for i := 1 to intval do begin
                          NewGene := TInitGene.Create;
                          CMDSetGeneValues(NewGene);
                          GeneList.Add(NewGene);
                      end;
                      //NGeneBox.Text := batcom;
                      //UpDown.Max := intval;
                      Rcnt := 0;
                      SubRootNumbers := nil;
                   end else IsError := true;
              end;
          end else if (comstr = 'GENE') then begin
              // read gene number
              if (Pos(' ',batcom) > 0) then begin
                 comstr := trim(Copy(batcom,1,Pos(' ',batcom)));
                 batcom := trim(Copy(batcom,Pos(' ',batcom),length(batcom)))+' ';
                 intval := StrToIntDef(comstr,-1);
                 if (intval > 0) and (intval <= GeneList.Count) then begin
                    gn := intval;
//                    GeneNBox.Text := ComStr;
//                    GeneNBoxChange(Self);
                    if (Pos('/',batcom) > 0) then begin
                       rstr := trim(Copy(batcom,Pos('/',batcom)+1,length(batcom)));
                       batcom := trim(Copy(batcom,1,Pos('/',batcom)-1));
                       // read initial gene parameters
                       while (batcom <> '') do begin
                             IsError := GetParam(batcom,comstr,parstr);
                             if (comstr = 'NSITES') then tmpSeqLen := parstr
                             else if (comstr = 'STARTA') then tmpinitA := parstr
                             else if (comstr = 'STARTC') then tmpinitC := parstr
                             else if (comstr = 'STARTG') then tmpinitG := parstr
                             else if (comstr = 'STARTT') then tmpinitT := parstr
                             else IsError := true;
                       end;
                       if not IsError then repeat
                          batcom := rstr + ' ';
                          if (Pos('/',batcom) > 0) then begin
                             rstr := trim(Copy(batcom,Pos('/',batcom)+1,length(batcom)));
                             batcom := trim(Copy(batcom,1,Pos('/',batcom)-1));
                          end else rstr := '';
                          if (Pos(':',batcom) > 0) then begin
                             comstr := trim(Copy(batcom,1,Pos(':',batcom)-1));
                             batcom := trim(Copy(batcom,Pos(':',batcom)+1,length(batcom)));
                             intval := StrToIntDef(comstr,-1);
                             if (intval < 0) then IsError := true
                             // root node
                             else if (intval = 0) then while (batcom <> '') do begin
                                  IsError := GetParam(batcom,comstr,parstr);
                                  if (comstr = 'RATE') then tmpRate := parstr
                                  else if (comstr = 'KAPPA') then tmpKappa := parstr
                                  else if (comstr = 'MODEL') then begin
                                       if (UpperCase(parstr) = 'JC') then tmpNucModel := 0
                                       else if (UpperCase(parstr) = 'K2') then tmpNucModel := 1
                                       else if (UpperCase(parstr) = 'EQINP') then tmpNucModel := 2
                                       else if (UpperCase(parstr) = 'HKY') then tmpNucModel := 3
                                       else if (UpperCase(parstr) = 'GENRES') then tmpNucModel := 4
                                       else IsError := true;
                                  end else if (comstr = 'EQA') then tmptargA := parstr
                                  else if (comstr = 'EQC') then tmptargC := parstr
                                  else if (comstr = 'EQG') then tmptargG := parstr
                                  else if (comstr = 'EQT') then tmptargT := parstr
                                  else if (comstr = 'DOINS') then begin
                                       if (UpperCase(parstr) = 'YES') then tmpDoIns := true
                                       else tmpDoIns := false;
                                  end else if (comstr = 'INSRATE') then tmpInsRate := parstr
                                  else if (comstr = 'INSSIZE') then tmpInsSize := parstr
                                  else if (comstr = 'DODEL') then begin
                                       if (UpperCase(parstr) = 'YES') then tmpDoDel := true
                                       else tmpDoDel := false;
                                  end else if (comstr = 'DELRATE') then tmpDelRate := parstr
                                  else if (comstr = 'DELSIZE') then tmpDelSize := parstr
                                  else if (comstr = 'GAMMAALPHA') then begin
                                       try
                                          fval := StrToFloat(parstr);
                                       except on EConvertError do fval := -1.0;
                                       end;
                                       if (fval < 0.0) then IsError := true
                                       else if (fval = 0.0) then tmpGamma := false
                                       else begin
                                            tmpGamma := true;
                                            tmpGammaA := parstr;
                                       end;
                                  end else if (comstr = 'GENRESPAR') then begin
                                      // GenResPar=(1,10,5,4,2,3)
                                      if (parstr[1] = '(') and (parstr[length(parstr)] = ')') then begin
                                         comstr := Copy(parstr,2,length(parstr)-2)+' ';
                                         for i := 1 to 5 do
                                             if (Pos(',',comstr) > 0) then begin
                                                parstr := Copy(comstr,1,Pos(',',comstr)-1);
                                                comstr := Copy(comstr,Pos(',',comstr)+1,length(comstr));
                                                case i of
                                                     1 : tmpAC := parstr;
                                                     2 : tmpAG := parstr;
                                                     3 : tmpAT := parstr;
                                                     4 : tmpCG := parstr;
                                                     5 : tmpCT := parstr;
                                                end;
                                             end else IsError := true;
                                         tmpGT := comstr;
                                      end else IsError := true;
                                  end else IsError := true;
                             end else begin
                                 // non-root node
                                 inc(Rcnt);
                                 SetLength(SubRootNumbers,Rcnt);
                                 SubRootNumbers[Rcnt-1].gene := gn;
                                 SubRootNumbers[Rcnt-1].branch := intval;
                                 NewGene := TInitGene.Create;
                                 NewGene.seqlength := StrToInt(tmpSeqLen);
                                 NewGene.initA := StrToFloat(tmpinitA);
                                 NewGene.initC := StrToFloat(tmpinitC);
                                 NewGene.initG := StrToFloat(tmpinitG);
                                 NewGene.initT := StrToFloat(tmpinitT);
                                 with NewGene do
                                      while (batcom <> '') do try
                                            IsError := GetParam(batcom,comstr,parstr);
                                            if (comstr = 'RATE') then Rate := StrToFloat(parstr)
                                            else if (comstr = 'MODEL') then begin
                                                 if (UpperCase(parstr) = 'JC') then NucModel := nmJC
                                                 else if (UpperCase(parstr) = 'K2') then NucModel := nmK2
                                                 else if (UpperCase(parstr) = 'EQINP') then NucModel := nmEqInp
                                                 else if (UpperCase(parstr) = 'HKY') then NucModel := nmHKY
                                                 else if (UpperCase(parstr) = 'GENRES') then NucModel := nmGenRes
                                                 else IsError := true;
                                            end else if (comstr = 'KAPPA') then TiTv := StrToFloat(parstr)/2.0
                                            else if (comstr = 'EQA') then Targa := StrToFloat(parstr)
                                            else if (comstr = 'EQC') then Targc := StrToFloat(parstr)
                                            else if (comstr = 'EQG') then Targg := StrToFloat(parstr)
                                            else if (comstr = 'EQT') then Targt := StrToFloat(parstr)
                                            else if (comstr = 'DOINS') then begin
                                                 if (UpperCase(parstr) = 'YES') then DoIns := true
                                                 else DoIns := false;
                                            end else if (comstr = 'INSRATE') then InRate := StrToFloat(parstr)
                                            else if (comstr = 'INSSIZE') then InSize := StrToFloat(parstr)
                                            else if (comstr = 'DODEL') then begin
                                                 if (UpperCase(parstr) = 'YES') then DoDel := true
                                                 else DoDel := false;
                                            end else if (comstr = 'DELRATE') then DelRate := StrTofloat(parstr)
                                            else if (comstr = 'DELSIZE') then DelSize := StrToFloat(parstr)
                                            else if (comstr = 'GAMMAALPHA') then begin
                                                 try
                                                    fval := StrToFloat(parstr);
                                                 except on EConvertError do fval := -1.0;
                                                 end;
                                                 if (fval < 0.0) then IsError := true
                                                 else if (fval = 0.0) then DoGamma := false
                                                 else begin
                                                      DoGamma := true;
                                                      GammaAlpha := fval;
                                                 end;
                                            end else if (comstr = 'GENRESPAR') then begin
                                                // GenResPar=(1,10,5,4,2,3)
                                                if (parstr[1] = '(') and (parstr[length(parstr)] = ')') then begin
                                                   comstr := Copy(parstr,2,length(parstr)-2)+' ';
                                                   for i := 1 to 5 do
                                                       if (Pos(',',comstr) > 0) then begin
                                                          parstr := Copy(comstr,1,Pos(',',comstr)-1);
                                                          comstr := Copy(comstr,Pos(',',comstr)+1,length(comstr));
                                                          try
                                                             fval := StrToFloat(trim(parstr));
                                                          except on EconvertError do IsError := true;
                                                          end;
                                                          GPars[i] := fval;
                                                       end else IsError := true;
                                                   try
                                                      fval := StrToFloat(trim(comstr));
                                                   except on EconvertError do IsError := true;
                                                   end;
                                                   GPars[6] := fval;
                                                   if not IsError then begin
                                                      pAC := GPars[1];
                                                      pAG := GPars[2];
                                                      pAT := GPars[3];
                                                      pCG := GPars[4];
                                                      pCT := GPars[5];
                                                      pGT := GPars[6];
                                                   end;
                                                end else IsError := true;
                                            end else IsError := true;
                                      except on EConvertError do IsError := true;
                                      end;
                                 SubRootList.Add(NewGene);
                             end;
                          end else IsError := true;
                       until IsError or (rstr = '');
                    end else IsError := true; }
                 end else IsError := true;
              end else IsError := true;
              // end of GENE command
          end else IsError := true;
          // end of command types with spaces
     end else IsError := true;
     // end of command types without spaces
     result := IsError;
end;

procedure CMDRun;
var
   IsGood : boolean;
   TempTree,MainTree : TNode;
   infile : TextFile;
   outname,outdir,curdir,
   StartSeq,prefix,
   instr,TreeText : string;
   n,i,j : integer;
   NodeList : TList;
   SubModelList : TObjectList;
   SubModel : TSubstitutionModel;
   IndelSizes : TStringList;
begin
     //SetGeneValues(TInitGene(GeneList[CGene]));
     //Screen.Cursor := crHourglass;
     //ProgressBar.Position := 0;
     ///ProgressBar.Visible := true;
     //SimLabel.Visible := true;
     //if not DoBatch then ProgForm.ShowModal;
     // Load Tree
     TempTree := TNode.Create;
     AssignFile(infile,CMDTree); Reset(infile);
     TreeText := '';
     repeat
           ReadLn(infile,instr);
           treetext := TreeText + instr;
     until (Pos(';',TreeText) <> 0);
     Closefile(infile);
     ReadTreePar(treetext,TempTree);
     MainTree := FindRootNode(TempTree);
     NodeList := TList.Create;
     CreateNodeList(MainTree,NodeList);
     // Prepare Genes
     SubModelList := TObjectList.Create;
     MainTree.SetGeneNumber(GeneList.Count);
     for i := 1 to GeneList.Count do begin
         SubModel := TSubstitutionModel.Create;
         CMDFillSubModel(TInitGene(GeneList[i-1]),SubModel,nil,0);
         SetSubMatrix(MainTree,i-1,SubModel);
         SubModelList.Add(SubModel);
     end;
     // add nonstationarity if necessary
     if (Rcnt > 0) then begin
        for i := 1 to Rcnt do begin
            SubModel := TSubstitutionModel.Create;
            CMDFillSubModel(TInitGene(SubRootList[i-1]),SubModel,NodeList[SubRootNumbers[i-1].branch],SubRootNumbers[i-1].gene-1);
            SetSubMatrix(NodeList[SubRootNumbers[i-1].branch],SubRootNumbers[i-1].gene-1,SubModel);
            SubModelList.Add(SubModel);
        end;
     end;
     // Setup Iterations
     prefix := CMDPrefix;
     n := CMDRepN;
     //ProgressBar.Max := n;

     // Perform Iterations
     outdir := CMDOutputDir;
     if not DirectoryExists(outdir) then MkDir(outdir);
     GetDir(0,CurDir);
     ChDir(outdir);
     IndelSizes := TStringList.Create;
     for j := 1 to n do begin
         repeat
               IsGood := true;
               ClearSequences(MainTree);
               for i := 0 to GeneList.Count - 1 do
                   with TInitGene(GeneList[i]) do begin
                        StartSeq := RandomNucSequence(seqlength,seed,inita,initc,initg,initt);
                        TGene(MainTree.Genes[i]).Sequence := StartSeq;
                   end;
               IndelSizes.Clear;
               SimulateOnTree(MainTree,seed,IndelSizes);
         until IsGood;
         case CMDOutputType of
              0 : begin
                       outname := prefix + IntToStr(j) + '.nex';
                       WritePaupInput(outname,prefix,MainTree,CMDAncestral);
                  end;
              1 : begin
                       outname := prefix + IntToStr(j) + '.meg';
                       WriteMegaInput(outname,prefix,MainTree,CMDAncestral);
                  end;
              2 : begin
                       outname := prefix + IntToStr(j) + '.fas';
                       WriteFASTAInput(outname,prefix,MainTree,CMDAncestral);
                  end;
         end;
         IndelSizes.SaveToFile(prefix + IntToStr(j)+'_indelsizes.txt');
         //ProgressBar.StepIt;
         //Application.ProcessMessages;
     end;
     ChDir(CurDir);
     IndelSizes.Free;
     // clear memory
     NodeList.Free;
     if (SubModelList <> nil) then begin
        SubModelList.Free;
     end;
end;

function GetParam(var instr,out1,out2 : string) : boolean;
var
   x : integer;
begin
     instr := instr + ' ';
     x := Pos('=',instr);
     if (x > 0) then begin
        result := false;
        out1 := UpperCase(trim(Copy(instr,1,x-1)));
        out2 := trim(Copy(instr,x+1,length(instr)));
        x := Pos(' ',out2);
        if (x > 0) then begin
           instr := trim(Copy(out2,x,length(out2)));
           out2 := trim(Copy(out2,1,x));
        end else instr := '';
     end else result := true;
end;

procedure WritePaupInput(filename,prefix : string; tree : TNode; IncAnc : boolean);
{ Create a text file which PAUP can use as input for analyses }
var
   outfile : TextFile;
   nchars,
   i,j,k : integer;
   NodeList,SeqList,
   Data : TStringList;
   tipnames : string;
begin
     Data := TStringList.Create;
     WriteTipSequences(Tree,Data);
     TipNames := '';
     WriteTipNames(Tree,TipNames,'T');
     AssignFile(outfile,filename); Rewrite(outfile);
     // PAUP header
     writeln(outfile,'#NEXUS');
     // taxa block
     writeln(outfile,'Begin Taxa;');
     writeln(outfile,'  Dimensions NTax='+IntToStr(Data.Count)+';');
     writeln(outfile,'  TaxLabels ' + TipNames+';');
     writeln(outfile,'End;');
     writeln(outfile);
     // character block
     writeln(outfile,'Begin Characters;');
     nchars := 0;
     for i := 0 to Tree.Genes.Count - 1 do
         nchars := nchars + length(TGene(Tree.Genes[i]).Sequence);
     writeln(outfile,'  Dimensions NChar='+IntToStr(nchars)+';');
     writeln(outfile,'  Format');
     writeln(outfile,'    DataType=DNA');
     writeln(outfile,'    matchchar=. Missing=? Gap=-');
     writeln(outfile,'    NoLabels;');
     // character matrix
     writeln(outfile,'Matrix');
     for i := 1 to Data.Count do writeln(outfile,Data[i-1]);
     writeln(outfile,';');
     writeln(outfile,'End;');
     writeln(outfile);
     // assumption block
     writeln(outfile,'Begin Sets;');
     j := 1;
     for i := 1 to Tree.Genes.Count do begin
         k := length(TGene(Tree.Genes[i-1]).Sequence);
         writeln(outfile,'   charset Gene'+IntToStr(i)+'='+IntToStr(j)+'-'+IntToStr(j+k-1)+';');
         j := j + k ;
     end;
     writeln(outfile,'End;');
     writeln(outfile);
     if IncAnc then begin
        NodeList := TStringList.Create;
        SeqList := TStringList.Create;
        OutputNodeSequences(Tree,NodeList,SeqList);
        writeln(outfile,'[ ---Ancestral Node Sequences---');
        writeln(outfile);
        for i := 0 to NodeList.Count - 1 do begin
            writeln(outfile,'>'+NodeList[i]);
            writeln(outfile,SeqList[i]);
        end;
        writeln(outfile);
        writeln(outfile,']');
        writeln(outfile);
        NodeList.Free;
        SeqList.Free;
     end;
     Closefile(outfile);
     Data.Free;
end;

procedure WriteMegaInput(filename,prefix : string; tree : TNode; IncAnc : boolean);
{ Create a text file which MEGA can use as input for analyses }
var
   outfile : TextFile;
   i,j : integer;
   NodeList,SeqList,
   TipNames,Data : TStringList;
begin
     Data := TStringList.Create;
     TipNames := TStringList.Create;
     GetTipNames(Tree,TipNames,'');
     AssignFile(outfile,filename); Rewrite(outfile);
     // header
     writeln(outfile,'#MEGA');
     writeln(outfile,'!Title Simulation-'+filename+';');
     // format block
     writeln(outfile,'!Format');
     writeln(outfile,'  DataType=DNA');
     writeln(outfile,'  Identical=. Missing=? Indel=-;');
     writeln(outfile);
     // genes
     for i := 0 to Tree.Genes.Count - 1 do begin
         writeln(outfile,'!Gene=Gene'+IntToStr(i+1)+';');
         Data.Clear;
         WriteTipSequencesGene(Tree,i,Data);
         for j := 0 to Data.Count - 1 do
             writeln(outfile,'#'+TipNames[j]+'   '+Data[j]);
         writeln(outfile);
     end;
     if IncAnc then begin
        NodeList := TStringList.Create;
        SeqList := TStringList.Create;
        OutputNodeSequences(Tree,NodeList,SeqList);
        writeln(outfile,'[ ---All Node Sequences---');
        writeln(outfile);
        for i := 0 to NodeList.Count - 1 do begin
            writeln(outfile,'>'+NodeList[i]);
            writeln(outfile,SeqList[i]);
        end;
        writeln(outfile);
        writeln(outfile,']');
        writeln(outfile);
        NodeList.Free;
        SeqList.Free; 
     end;
     Closefile(outfile);
     TipNames.Free;
     Data.Free;
end;

procedure WriteFASTAInput(filename,prefix : string; tree : TNode; IncAnc : boolean);
{ Create a text file which PAUP can use as input for analyses }
var
   outfile : TextFile;
   i,j : integer;
   NodeList,SeqList,
   TipNames,Data : TStringList;
   outstr : string;
begin
     Data := TStringList.Create;
     WriteTipSequences(Tree,Data);
     TipNames := TStringList.Create;
     GetTipNames(Tree,TipNames,'');
     AssignFile(outfile,filename); Rewrite(outfile);
     for i := 0 to Data.Count - 1 do begin
         writeln(outfile,'>'+TipNames[i]);
         outstr := Data[i];
         while (length(outstr) > 80) do begin
               writeln(outfile,Copy(outstr,1,80));
               outstr := Copy(outstr,81,length(outstr));
         end;
         writeln(outfile,outstr);
     end;
     writeln(outfile);
     if IncAnc then begin
        NodeList := TStringList.Create;
        SeqList := TStringList.Create;
        OutputNodeSequences(Tree,NodeList,SeqList);
        writeln(outfile,'[ ---All Node Sequences---');
        writeln(outfile);
        for i := 0 to NodeList.Count - 1 do begin
            writeln(outfile,'>'+NodeList[i]);
            outstr := SeqList[i];
            while (length(outstr) > 80) do begin
                  writeln(outfile,Copy(outstr,1,80));
                  outstr := Copy(outstr,81,length(outstr));
            end;
        end;
        writeln(outfile);
        writeln(outfile,']');
        writeln(outfile);
        NodeList.Free;
        SeqList.Free; 
     end;
     Closefile(outfile);
     TipNames.Free;
     Data.Free;
end;

procedure CMDFillSubModel(IGene : TInitGene; SModel : TSubstitutionModel;
          Node : TNode; GeneN : integer);
var
   n : integer;
   a,b : double;
   InType,DelType : TIndelDistType;
begin
     with IGene do begin
          SModel.DataType := dtNucleotide;
          SModel.NucModel := NucModel;
          SModel.SetupNucFreq(targA,targC,targG,targT);
          case NucModel of
               nmJC : begin
                           CalcJCParameter(Rate,a);
                           SModel.Alpha := a;
                      end;
               nmK2 : begin
                           CalcK2Parameters(Rate,TiTv,a,b);
                           SModel.Alpha := a;
                           SModel.Beta := b;
                      end;
               nmEqInp : begin
                              CalcEqInpParameters(Rate,targA,targC,targG,targT,a);
                              SModel.Alpha := a;
                         end;
               nmHKY : begin
                            CalcHKYParameters(rate,TiTv,targA,targC,targG,targT,a,b);
                            SModel.Alpha := a;
                            SModel.Beta := b;
                       end;
               nmGenRes : begin
                               CalcGenResParameters(rate,targA,targC,targG,targT,
                                   pac,pag,pat,pcg,pct,pgt);
                               SModel.SetGenRes(pAC,pAG,pAT,pCG,pCT,pGT);
                          end;
          end;

          if DoGamma then begin
             n := SeqLength;
             if (node = nil) then SModel.SetGamma(GammaAlpha,SeqLength,seed)
             else if (node.Ancestor = nil) then SModel.SetGamma(GammaAlpha,SeqLength,seed)
             else begin
                  if TGene(Node.Ancestor.Genes[GeneN]).SubstitutionModel.IsGamma then begin
                     if (TGene(Node.Ancestor.Genes[GeneN]).SubstitutionModel.GammaA = GammaAlpha) then
                        SModel.CopyGamma(GammaAlpha,TGene(Node.Ancestor.Genes[GeneN]).SubstitutionModel.GammaRates)
                     else SModel.SetGammaDesc(GammaAlpha,n,seed,
                       TGene(Node.Ancestor.Genes[GeneN]).SubstitutionModel.GammaRates);
                  end else SModel.SetGamma(GammaAlpha,SeqLength,seed);
             end;
          end;

          case InDist of
               0 : InType := idtPoisson;
               1 : InType := idtPower;
               else InType := idtPoisson;
          end;
          case DelDist of
               0 : DelType := idtPoisson;
               1 : DelType := idtPower;
               else DelType := idtPoisson;
          end;
          if DoIns then SModel.Insertions.SetModel(InType,InRate,InSize,InPower);
          if DoDel then SModel.Insertions.SetModel(DelType,DelRate,DelSize,DelPower);
     end;
end;

end.
